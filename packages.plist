{
	packages = {
		plugins = (
			{
				name = "Shadow.glyphsFilter";
				url = "https://github.com/mekkablue/Shadow";
				description = "*Filter > Shadow* turns your glyphs into shadowed versions of themselves.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/Shadow/master/Shadow.png";
			},
			{
				name = "ShowItalic.glyphsReporter";
				url = "https://github.com/mekkablue/ShowItalic";
				description = "*View > Show Italic* displays the italic (or upright) counterpart of the current glyph in Edit view, given that both the Upright and Italic fonts are opened in Glyphs, and given that the other font contains a glyph with the same name. It is useful for stepping through the glyphs and checking if there is an undesired deviation, e.g., a different diacritic height or different descender depth.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/ShowItalic/master/ShowItalic.png";
			},
			{
				name = "SmartPlumblines.glyphsReporter";
				url = "https://github.com/Mark2Mark/Show-Smart-Plumblines";
				description = "By default it displays **live guidelines** at the center of each paths’ *red* and components’ *grey* bounding box.\nIf you select anything, it also displays the center of that selection *blue dashed*.\nOne major feature is that the guideline **automatically matches your italic angle**.\nThis is useful for aligning objects by sight. As well as:\n\n- Align multiple paths and/or components\n- Setting up (horizontal) positions of anchors\n- Editing segments while easily keeping italic angle\n- etc.";
				screenshot = "https://raw.githubusercontent.com/Mark2Mark/Glyphsapp-Plugins/Screenshots/Screenshots/SmartPlumblines/SmPlL%2012.png?raw=true";
			},
			{
				name = "RedArrow.glyphsReporter";
				url = "https://github.com/jenskutilek/RedArrow-Glyphs";
				description = "Now Glyphs users can also have red arrows!\nThis plugin points at possible outline errors, like FontAudit in FontLab Studio. This version only works in Glyphs 2.2 and newer. When the plugin is active, red arrows will point to possible mistakes in your outlines.";
				screenshot = "https://github.com/jenskutilek/RedArrow-Glyphs/raw/glyphs2/screenshot.png";
			},
			{
				name = "DrawBot.glyphsPlugin";
				url = "https://github.com/schriftgestalt/DrawBotGlyphsPlugin";
				description = "DrawBot inside Glyphs.\nMake a new drawBot from the File menu > New DrawBot, or open a file with cmd+O. Save or Save As as usual. Run the script by hitting the Run button (or pressing cmd+⏎). Clean the output area by pressing cmd+K.\n\nTo save a drawing as pdf, hit cmd+E (or File > Export..)";
				screenshot = "https://github.com/schriftgestalt/DrawBotGlyphsPlugin/blob/master/GlyphsLogoDrawBot.png";
			},
			{
				name = "ShowTopsAndBottoms.glyphsReporter";
				url = "https://github.com/mekkablue/ShowTopsAndBottoms";
				description = "*View > Show Tops And Bottoms* displays the bounding box tops and bottoms for each glyph in the Edit view, and marks them red if they are not inside an alignment zone.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/ShowTopsAndBottoms/master/ShowTopsAndBottoms.png";
			},
			{
				name = "ShowOffsetCurveParameterPreview.glyphsReporter";
				url = "https://github.com/mekkablue/ShowOffsetCurveParameterPreview";
				description = "*View > Show Offset Curve Parameter Preview* calculates the *GlyphsFilterOffsetCurve* parameters in active instances for the given glyph and draws those instances behind your paths. It quietly adds extremum and inflection nodes to your preview outlines. But it does not give you a full preview of the final instance, because it does not show the effect of any other parameters. It is focused on helping you spot path offset problems.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/ShowOffsetCurveParameterPreview/master/OffsetPreview.png";
			},
			{
				name = "ShowInterpolation.glyphsReporter";
				url = "https://github.com/mekkablue/ShowInterpolations";
				description = "*View > Show Interpolations* calculates all active instances for the given glyph and draws them behind your paths.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/ShowInterpolations/master/ShowInterpolations.png";
			},
			{
				name = "ShowHandlesEverywhere.glyphsReporter";
				url = "https://github.com/mekkablue/ShowHandlesEverywhere";
				description = "*View > Show Handles Everywhere* displays **nodes & handles** for paths **in the background** (if *View > Show Background* is on), **on other layers** (if the layer is set to visible) as well as **in inactive glyphs** surrounding the current glyph (if *View > Fill Preview* is off).";
				screenshot = "https://raw.githubusercontent.com/mekkablue/ShowHandlesEverywhere/master/ShowHandlesEverywhere.png";
			},
			{
				name = "ShowFilledPreview.glyphsReporter";
				url = "https://github.com/mekkablue/ShowFilledPreview";
				description = "*View > Show Filled Preview* fills open paths with a dark gray color even while you are still drawing.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/ShowFilledPreview/master/ShowFilledPreview.png";
			},
			{
				name = "ShowExportStatus.glyphsReporter";
				url = "https://github.com/mekkablue/ShowExportStatus";
				description = "*View Show Export Status* displays a red cross over non-exporting glyphs in Edit View.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/ShowExportStatus/master/ShowExportStatus.png";
			},
			{
				name = "ShowDistanceBetweenTwoPoints.glyphsReporter";
				url = "https://github.com/mekkablue/ShowDistanceBetweenTwoPoints";
				description = "*View > Show Distance Between Two Points* displays the distance between two selected nodes when exactly two points are selected, ignoring intersections in between.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/ShowDistanceBetweenTwoPoints/master/ShowDistanceBetweenTwoPoints.png";
			},
			{
				name = "ShowCoordinatesOfSelectedNodes.glyphsReporter";
				url = "https://github.com/mekkablue/ShowCoordinatesOfSelectedNodes";
				description = "*View > Show Coordinates of Selected Nodes* displays coordinates for selected on-curve nodes, as well as length and angle of the surrounding handles and line segments.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/ShowCoordinatesOfSelectedNodes/master/ShowCoordinatesOfSelectedNodes.png";
			},
			{
				name = "ShowComponentOrder.glyphsReporter";
				url = "https://github.com/mekkablue/ShowComponentOrder";
				description = "*View > Show Component Order* displays components in different colors depending on the order of the component. This way, you can step through your component-based glyphs (fn-arrows or Home/End on large keyboards) and quickly spot an order mistake.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/ShowComponentOrder/master/ShowComponentOrder.png";
			},
			{
				name = "ShowAngledHandles.glyphsReporter";
				url = "https://github.com/mekkablue/ShowAngledHandles";
				description = "*View > Show Angled Handles* highlights BCPs (‘handles’) which are not horizontal or vertical, quite-but-not-completely-straight line segments, duplicate paths, crossed handles, and zero handles.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/ShowAngledHandles/master/ShowAngledHandles.png";
			},
			{
				name = "Retractor.glyphsFilter";
				url = "https://github.com/mekkablue/Retractor";
				description = "*Filter > Retractor* deletes (‘retracts’) all Bézier control points (a.k.a. BCPs, handles), making sure only straight line segments remain. This can be useful if you want to be certain that accidentally added curve segments are removed in designs where this is necessary. Careful: it does *not* respect your node selection. If you want to only retract selected BCPs, simply press Delete.";
			},
			{
				name = "FixZeroHandles.glyphsFilter";
				url = "https://github.com/mekkablue/FixZeroHandles";
				description = "*Filter > Fix Zero Handles* analyzes the path structure of selected layers and will rearrange path segments that contain completely retracted handles, a.k.a. ‘zero handles’. Zero handles typically appear in outlines imported from other vector apps, such as Adobe Illustrator. Zero handles are considered bad style, or even an error, and can cause a range of problems, especially when you are trying to convert your outlines to TrueType curves.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/FixZeroHandles/master/FixZeroHandles.png";
			},
			{
				name = "Disguiser.glyphsFilter";
				url = "https://github.com/mekkablue/Disguiser";
				description = "*Filter > Disguiser* replaces the layer with a rectangle covering its bounds. This is useful for sharing files that contain sensitive designs. If invoked on a partial selection, the Disguiser will place a rectangle only over the selected parts.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/Disguiser/master/Disguiser.png";
			},
			{
				name = "CutAndShake.glyphsFilter";
				url = "https://github.com/mekkablue/CutAndShake";
				description = "*Filter > Cut and Shake* exercises cuts across selected glyphs, and then both moves and rotates the resulting parts by random amounts, for which the user can specify maximums.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/CutAndShake/master/CutAndShake.png";
			},
			{
				name = "BroadNibber.glyphsFilter";
				url = "https://github.com/mekkablue/BroadNibber";
				description = "*Filter > Broad Nibber* turns monolines of all selected glyphs into broad-nib strokes.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/BroadNibber/master/BroadNibber.png";
			},
			{
				name = "InsertInflections.glyphsFilter";
				url = "https://github.com/mekkablue/InsertInflections";
				description = "*Filter > Insert Inflections* inserts nodes on all inflections of all selected glyphs. This is useful for monoline workflows, where inflected paths need to be expanded to a closed stroke; and for conversion into TrueType outlines.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/InsertInflections/master/InsertInflections.png";
			},
			{
				name = "Inverter.glyphsFilter";
				url = "https://github.com/mekkablue/Inverter";
				description = "*Filter > Inverter* provides a GUI for inverting glyphs. It puts an enclosing rectangle around your glyphs, slanted to the italic angle. You can set the top and bottom edge, as well as its overlap beyond its sidebearings.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/Inverter/master/Inverter.png";
			},
			{
				name = "LayerGeek.glyphsFilter";
				url = "https://github.com/mekkablue/LayerGeek";
				description = '*Filter > Layer Geek* provides a GUI for batch-executing Python and PyObjC methods on selected layers. For an overview of available layer methods, type `help(GSLayer)` and press the *Run* button in the Macro Window. You can run a series of methods if you concatenate them with semicolons. Its true power, however, lies in its use as Custom Parameter:

#### Usage Examples:

Here are some values and what they do:

    correctPathDirection();removePathAtIndex_(0);correctPathDirection()

This removes the outermost path and corrects path direction.

    makeFirstComponent_(Layer.componentAtIndex_(1))

This takes the second component and makes it the first one. You can use `Layer` for a nested reference to the Layer object.

    removeComponentAtIndex_(Layer.componentCount()-1)

Removes the last component.

    addExtremePoints();cleanUpPaths();

Adds extremes and cleans up paths (like *Layer > Tidy up path*).

    removeAnchorWithName_("bottom")

Removes bottom anchors.

    setHints_(None);setGuideLines_(None)

Deletes all hints and guidelines.

    addComponent_(GSComponent("B"))

Adds the glyph `B` as a component to the layer.';
				screenshot = "https://raw.githubusercontent.com/mekkablue/LayerGeek/master/LayerGeek.png";
			},
			{
				name = "Noodler.glyphsFilter";
				url = "https://github.com/mekkablue/Noodler";
				description = "*Filter > Noodler* turns monolines of all selected glyphs into noodles.";
				screenshot = "https://raw.githubusercontent.com/mekkablue/Noodler/master/Noodler.png";
			}
		);
	};
}